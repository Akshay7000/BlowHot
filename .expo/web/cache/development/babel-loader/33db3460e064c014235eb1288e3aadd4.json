{"ast":null,"code":"var _ExpoUpdates$releaseC, _ExpoUpdates$channel, _ExpoUpdates$runtimeV, _ExpoUpdates$localAss, _ref, _manifest$developer, _NativeModulesProxy$E;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { RCTDeviceEventEmitter, CodedError, NativeModulesProxy, UnavailabilityError } from 'expo-modules-core';\nimport { EventEmitter } from 'fbemitter';\nimport ExpoUpdates from \"./ExpoUpdates\";\nexport * from \"./Updates.types\";\nexport var updateId = ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string' ? ExpoUpdates.updateId.toLowerCase() : null;\nexport var releaseChannel = (_ExpoUpdates$releaseC = ExpoUpdates.releaseChannel) != null ? _ExpoUpdates$releaseC : 'default';\nexport var channel = (_ExpoUpdates$channel = ExpoUpdates.channel) != null ? _ExpoUpdates$channel : null;\nexport var runtimeVersion = (_ExpoUpdates$runtimeV = ExpoUpdates.runtimeVersion) != null ? _ExpoUpdates$runtimeV : null;\nexport var localAssets = (_ExpoUpdates$localAss = ExpoUpdates.localAssets) != null ? _ExpoUpdates$localAss : {};\nexport var isEmergencyLaunch = ExpoUpdates.isEmergencyLaunch || false;\nexport var isUsingEmbeddedAssets = ExpoUpdates.isUsingEmbeddedAssets || false;\nexport var manifest = (_ref = ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) != null ? _ref : {};\nvar isUsingDeveloperTool = !!((_manifest$developer = manifest.developer) != null && _manifest$developer.tool);\nvar isUsingExpoDevelopmentClient = ((_NativeModulesProxy$E = NativeModulesProxy.ExponentConstants) == null ? void 0 : _NativeModulesProxy$E.appOwnership) === 'expo';\nvar manualUpdatesInstructions = isUsingExpoDevelopmentClient ? 'To test manual updates, publish your project using `expo publish` and open the published ' + 'version in this development client.' : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' + '`npm run android --variant Release`.';\nexport function reloadAsync() {\n  return _regeneratorRuntime.async(function reloadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoUpdates.reload) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'reloadAsync');\n\n        case 2:\n          if (!(__DEV__ && !isUsingExpoDevelopmentClient)) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot use the Updates module in development mode in a production app. \" + manualUpdatesInstructions);\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(ExpoUpdates.reload());\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function checkForUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function checkForUpdateAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoUpdates.checkForUpdateAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n\n        case 2:\n          if (!(__DEV__ || isUsingDeveloperTool)) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot check for updates in development mode. \" + manualUpdatesInstructions);\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(ExpoUpdates.checkForUpdateAsync());\n\n        case 6:\n          result = _context2.sent;\n\n          if (result.manifestString) {\n            result.manifest = JSON.parse(result.manifestString);\n            delete result.manifestString;\n          }\n\n          return _context2.abrupt(\"return\", result);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function fetchUpdateAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoUpdates.fetchUpdateAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n\n        case 2:\n          if (!(__DEV__ || isUsingDeveloperTool)) {\n            _context3.next = 4;\n            break;\n          }\n\n          throw new CodedError('ERR_UPDATES_DISABLED', \"You cannot fetch updates in development mode. \" + manualUpdatesInstructions);\n\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(ExpoUpdates.fetchUpdateAsync());\n\n        case 6:\n          result = _context3.sent;\n\n          if (result.manifestString) {\n            result.manifest = JSON.parse(result.manifestString);\n            delete result.manifestString;\n          }\n\n          return _context3.abrupt(\"return\", result);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion) {\n  console.warn(\"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\");\n}\n\nvar _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  var newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n\n  return emitter.addListener('Expo.updatesEvent', listener);\n}","map":{"version":3,"sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RCTDeviceEventEmitter,\n  CodedError,\n  NativeModulesProxy,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n} from './Updates.types';\n\nexport * from './Updates.types';\n\n/**\n * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n * will always use lowercase letters. In development mode, or any other environment in which\n * `expo-updates` is disabled, this value is `null`.\n */\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\n\n/**\n * The name of the release channel currently configured in this standalone or bare app when using\n * classic updates. When using Expo Updates, the value of this field is always `\"default\"`.\n */\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\n\n/**\n * The channel name of the current build, if configured for use with EAS Update. Null otherwise.\n */\nexport const channel: string | null = ExpoUpdates.channel ?? null;\n\n/**\n * The runtime version of the current build.\n */\nexport const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\n\n/**\n * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n * you don't need to worry about backwards compatibility when you put out an update. In very rare\n * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n * can use this constant to provide special behavior for this rare case.\n */\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\n/**\n * If `expo-updates` is enabled, this is the\n * [manifest](/guides/how-expo-works#expo-development-server) object for the update that's currently\n * running.\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n * empty.\n */\nexport const manifest: Partial<Manifest> =\n  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??\n  {};\n\nconst isUsingDeveloperTool = !!(manifest as any).developer?.tool;\nconst isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';\nconst manualUpdatesInstructions = isUsingExpoDevelopmentClient\n  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +\n    'version in this development client.'\n  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +\n    '`npm run android --variant Release`.';\n\n/**\n * Instructs the app to reload using the most recently downloaded version. This is useful for\n * triggering a newly downloaded update to launch without the user needing to manually restart the\n * app.\n *\n * It is not recommended to place any meaningful logic after a call to `await\n * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\n * be reloaded, and immediately before posting an asynchronous task to the main thread to actually\n * reload the app. It is unsafe to make any assumptions about whether any more JS code will be\n * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\n * the state of the native module and main threads.\n *\n * This method cannot be used in development mode, and the returned promise will be rejected if you\n * try to do so.\n *\n * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or\n * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\n * mode, it most likely means you have installed the module incorrectly. Double check you've\n * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`\n * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\n * Android ensure you either call `UpdatesController.initialize` with the instance of\n * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\n * proper instance of `ReactNativeHost`.\n */\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (__DEV__ && !isUsingExpoDevelopmentClient) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\n/**\n * Checks the server to see if a newly deployed update to your project is available. Does not\n * actually download the update. This method cannot be used in development mode, and the returned\n * promise will be rejected if you try to do so.\n *\n * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * Downloads the most recently deployed update to your project from server to the device's local\n * storage. This method cannot be used in development mode, and the returned promise will be\n * rejected if you try to do so.\n *\n * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (__DEV__ || isUsingDeveloperTool) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\n/**\n * Adds a callback to be invoked when updates-related events occur (such as upon the initial app\n * load) due to auto-update settings chosen at build-time.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the\n * listener.\n */\nexport function addListener(listener: (event: UpdateEvent) => void): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}