{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { NavigationHelpersContext, NavigationContext, NavigationRouteContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Header from \"./Header\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nimport getIsDrawerOpenFromState from \"../utils/getIsDrawerOpenFromState\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      _ref2$lazy = _ref2.lazy,\n      lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, props);\n  } : _ref2$drawerContent,\n      _ref2$drawerPosition = _ref2.drawerPosition,\n      drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n      _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n      keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n      _ref2$overlayColor = _ref2.overlayColor,\n      overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n      _ref2$drawerType = _ref2.drawerType,\n      drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n      _ref2$hideStatusBar = _ref2.hideStatusBar,\n      hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n      _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n      statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n      drawerContentOptions = _ref2.drawerContentOptions,\n      drawerStyle = _ref2.drawerStyle,\n      edgeWidth = _ref2.edgeWidth,\n      gestureHandlerProps = _ref2.gestureHandlerProps,\n      minSwipeDistance = _ref2.minSwipeDistance,\n      sceneContainerStyle = _ref2.sceneContainerStyle,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n\n  var _React$useState = React.useState([state.routes[state.index].key]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var dimensions = useWindowDimensions();\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = getIsDrawerOpenFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n\n    return function () {\n      var _subscription;\n\n      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  var focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$h = _descriptor$options.header,\n          header = _descriptor$options$h === void 0 ? function (props) {\n        return React.createElement(Header, props);\n      } : _descriptor$options$h,\n          _descriptor$options$h2 = _descriptor$options.headerShown,\n          headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: detachInactiveScreens\n      }, headerShown ? React.createElement(NavigationContext.Provider, {\n        value: descriptor.navigation\n      }, React.createElement(NavigationRouteContext.Provider, {\n        value: route\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n      gestureEnabled = _descriptors$activeKe.gestureEnabled,\n      swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","lazy","drawerContent","props","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","detachInactiveScreens","React","state","dimensions","useWindowDimensions","colors","useTheme","isDrawerOpen","getIsDrawerOpenFromState","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","type","subscription","focusedRouteKey","loaded","setLoaded","renderNavigationView","progress","descriptors","renderContent","styles","content","descriptor","route","unmountOnBlur","isFocused","header","headerShown","StyleSheet","opacity","layout","scene","activeKey","swipeEnabled","backgroundColor","background","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}